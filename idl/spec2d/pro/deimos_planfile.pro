;+
; NAME:
;    deimos_planfile
;
; PURPOSE:
;    scans a directory and creates *plan files for reduction of DEIMOS
;    data
;
; CALLING SEQUENCE:
;    deimos_planfile, [datadir]
; 
; INPUTS:
;    [datadir] -- if specified, the directory containing raw data. If
;                 not specfied, defaults to current directory
;
; OPTIONAL INPUTS:
;	
; KEYWORDS:
;
; OUTPUTS:
;    generates a series of xxxx.plan files, where xxxx is the mask name
;
; COMMENTS:
;
; REVISION HISTORY:
;   Jul02, DPF
;   6sep02, MD comments added
;----------------------------------------------------------------------


; Make plan file for DEIMOS 2d processing
function deimos_hdr_struct, N

  str = {fname:   '', $
         mask:    '', $
         exptime: 0., $
         obstype: '', $
         lamps:   '', $
         grating: '', $
         grangle: 0., $
         wave: 0., $
         object:  ''}

  if n_elements(N) NE 0 then str = replicate(str, N)
  return, str
end



function deimos_parse_header, fname

  h = headfits(fname)
  s = deimos_hdr_struct()
  s.fname = fname
  s.mask = strcompress(sxpar(h, 'SLMSKNAM'), /rem)
  s.exptime = sxpar(h, 'EXPTIME')
  s.obstype = strcompress(sxpar(h, 'OBSTYPE'), /rem)
  s.lamps = strcompress(sxpar(h, 'LAMPS'), /rem)
  s.grating = strcompress(sxpar(h, 'GRATENAM'), /rem)
  s.object = sxpar(h, 'OBJECT')

  deimos_grating, h, g_rule, grangle, lambda_c
  s.grangle = grangle
  s.wave=lambda_c
  return, s
end



pro deimos_plan, s, maskname, rawdatadir
  w = where(s.mask eq maskname)
  a = s[w]
  flatind    = where(a.lamps eq 'Qz', nflats)
  arcind     = where( ( (strpos(a.lamps, 'Ar') ne -1) or $
                      (strpos(a.lamps, 'Kr') ne -1) or $
                      (strpos(a.lamps, 'Xe') ne -1) or $
                      (strpos(a.lamps, 'Cd') ne -1) or $
                      (strpos(a.lamps, 'Hg') ne -1) or $
                      (strpos(a.lamps, 'Ne') ne -1) ) $
                      AND a.wave gt 2000., narcs)
  scienceind = where((a.lamps eq 'Off') AND (a.exptime GT 250) AND $
                     (a.obstype eq 'Object'), nscience)

  if (nflats GE 1) AND (narcs GE 1) AND (nscience GE 1) then begin 

     planname = maskname+'.plan'
     openw, wlun, planname, /get_lun
     
     printf, wlun, '# Plan file auto-generated by deimos_planfile.pro ', $
       systime()
     printf, wlun, '# Grating: ', a[0].grating, '       Grangle: ', $
       a[scienceind[0]].grangle
     printf, wlun, maskname, format='("MASK: ",A)'
     printf, wlun, rawdatadir, format='("RAWDATADIR: ",A)'
     printf, wlun, 'polyflag   - use polyflag for fitting lambda'
     printf, wlun, a[flatind].fname, format='("FLATNAME: ",A)'
     printf, wlun, a[arcind].fname, format='("ARCNAME: ",A)'
     printf, wlun, a[scienceind].fname, format='("SCIENCENAME: ",A)'
     free_lun, wlun
     print, planname

  endif else begin 
     
     print, 'Cannot create plan file for mask ', maskname

  endelse 

  return
end



pro deimos_planfile, datadir

  if NOT keyword_set(datadir) then datadir = './'
  cd, datadir
  cd, current=cwd
  rawdatadir = stregex(cwd,'([0-z]+$)',/extract)

  flist = findfile('d*_*.fits*', count=ct)
  if ct eq 0 then message, 'Where are the files?'
  
  print, 'Looping through', ct, ' files', format='(A,I4,A)'
  s = deimos_hdr_struct(ct)
  for i=0, ct-1 do s[i] = deimos_parse_header(flist[i])
  sind = sort(s.mask)
  s = s[sind]
  ind = uniq(s.mask)
  nmask = n_elements(ind) 
  
  for i=0, nmask-1 do begin 
     maskname = s[ind[i]].mask
     deimos_plan, s, maskname, rawdatadir
  endfor 


  return
end
